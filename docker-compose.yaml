version: '3'

services:

  # nginx:
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     - webapp-interactive
  #     - orchestre
  #     - profil   
  #   networks:
  #     - app-network    
  caddy:
    image: caddy:latest
    ports:
      - "80:80"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./webApp_userInterface/dist:/usr/share/caddy:ro
    depends_on:
      - orchestre
      - webapp 
      - webapp-interactive
    networks:
      - app-network
  webapp:
    build: ./webApp_userInterface
    ports:
      - "5173:5173"
    environment:
      - VITE_API_SERVICE_ORCHESTRE_URL_INTERNAL_NETWORK=http://orchestre:8080/api/workflow
      - VITE_API_SERVICE_ORCHESTRE_URL_FROM_PROXY=http://localhost:80/api/workflow
    volumes:
      - ./webApp_userInterface:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - orchestre

  webapp-interactive:
    build: ./webApp_interactive
    ports:
      - "4200:4200"

    depends_on:
      - orchestre
    networks:
      - app-network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-network    

  cypress:
    build: ./cypressService
    environment:
      - DISPLAY=host.docker.internal:0
      - CYPRESS_baseUrl=http://webapp:5173
      - QT_X11_NO_MITSHM=1
      - _X11_NO_MITSHM=1
      - _MITSHM=0
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix  
      - ~/.Xauthority:/home/node/.Xauthority 
      - cypress_logs:/app/cypress-logs  
    depends_on:
      - webapp
      - orchestre
    networks:
      - app-network

  orchestre:
    build: ./orchestreService
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - PROFIL_SERVICE_URL=http://profil:8081
    
    networks:
      - app-network
    depends_on:
      - profil
      - order
      - cart
      - payment
      - inventary
    

  profil:
    build: ./profilService
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=test
      # - SPRING_PROFILES_ACTIVE=dev
    networks:
      - app-network
    depends_on:
      # - dbProfil
      - dbProfilTest


  inventary:
    build: ./inventaryService
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://dbInventary:5432/InventaryServiceDB
      - DB_USERNAME=postgres
      - DB_PASSWORD=mypass
    networks:
      - app-network
    depends_on:
      - dbInventary

  payment:
    build: ./paymentService
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=test
      # - SPRING_PROFILES_ACTIVE=dev
    networks:
      - app-network
    depends_on:
      # - dbPayment
      - dbPaymentTest

  notification:
    build: ./notificationService
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    networks:
      - app-network

  order:
    build: ./orderService
    ports:
      - "8084:8084"
    environment:
      - SPRING_PROFILES_ACTIVE=test
      # - SPRING_PROFILES_ACTIVE=dev
    networks:
      - app-network
    depends_on:
      # - dbOrder
      - dbOrderTest

  cart:
    build: ./cartService
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=test
      # - SPRING_PROFILES_ACTIVE=dev
    networks:
      - app-network
    depends_on:
      # - dbCart   
      - dbCartTest    

  # dbProfil:
  #   image: postgres:17-alpine
  #   container_name: db-profil
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: ProfilServiceDB
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: mypass
  #     POSTGRES_HOST_AUTH_METHOD: scram-sha-256  
  #   ports:
  #     - "5432:5432"  
  #   volumes:
  #     - pgProfilData:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d ProfilServiceDB"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  dbProfilTest:
    image: postgres:17-alpine
    container_name: db-profil-test
    environment:
      POSTGRES_DB: ProfilServiceTestDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  

    ports:
      - "5532:5432"
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ProfilServiceTestDB"]
      interval: 5s
      timeout: 5s
      retries: 5

  dbInventary:
    image: postgres:17-alpine
    container_name: db-inventary
    restart: unless-stopped
    environment:
      POSTGRES_DB: InventaryServiceDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5433:5432"
    volumes:
      - pgInventaryData:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d InventaryServiceDB"]
      interval: 5s
      timeout: 5s
      retries: 5 

  # dbPayment:
  #   image: postgres:17-alpine
  #   container_name: db-payment
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: PaymentServiceDB
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: mypass
  #     POSTGRES_HOST_AUTH_METHOD: scram-sha-256
  #   ports:
  #     - "5435:5432"
  #   volumes:
  #     - pgPaymentData:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d PaymentServiceDB"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5 

  dbPaymentTest:
    image: postgres:17-alpine
    container_name: db-payment-test
    environment:
      POSTGRES_DB: PaymentServiceTestDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  

    ports:
      - "5535:5432"
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d PaymentServiceTestDB"]
      interval: 5s
      timeout: 5s
      retries: 5
    

  # dbOrder:
  #   image: postgres:17-alpine
  #   container_name: db-order
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: OrderServiceDB
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: mypass
  #     POSTGRES_HOST_AUTH_METHOD: scram-sha-256
  #   ports:
  #     - "5434:5432"
  #   volumes:
  #     - pgOrderData:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d OrderServiceDB"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5 

  dbOrderTest:
    image: postgres:17-alpine
    container_name: db-order-test
    environment:
      POSTGRES_DB: OrderServiceTestDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  

    ports:
      - "5534:5432"
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d OrderServiceTestDB"]
      interval: 5s
      timeout: 5s
      retries: 5    

  # dbCart:
  #   image: postgres:17-alpine
  #   container_name: db-cart
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: CartServiceDB
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: mypass
  #     POSTGRES_HOST_AUTH_METHOD: scram-sha-256
  #   ports:
  #     - "5436:5432"
  #   volumes:
  #     - pgCartData:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres -d CartServiceDB"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5    

  dbCartTest:
    image: postgres:17-alpine
    container_name: db-cart-test
    environment:
      POSTGRES_DB: CartServiceTestDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256  

    ports:
      - "5536:5432"
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d CartServiceTestDB"]
      interval: 5s
      timeout: 5s
      retries: 5     


networks:
  app-network:
    driver: bridge

volumes:
  # pgProfilData:
  pgInventaryData:
  # pgOrderData:
  # pgPaymentData:
  # pgCartData:
  cypress_logs:

